@model RentalJob
@{
    ViewData["Title"] = "Job Status";
}

<div class="job-status-container">
    <header class="job-header">
        <h1>Active Job Status</h1>
        @if(Model.Status == JobStatus.Running)
        {
            <form asp-action="Stop" asp-controller="Rental" method="post">
                <input type="hidden" name="rentalJobId" value="@Model.RentalJobId" />
                <button type="submit" class="stop-job-btn">Stop Job</button>
            </form>
        }
    </header>

    <section class="content-grid">
        <div class="card job-details">
            <h2>Job Details</h2>
            <div class="detail-item">
                <span class="detail-label">Status:</span>
                @{
                    var statusClass = Model.Status == JobStatus.Running ? "status-badge" : "status-badge status-badge-inactive";
                }
                <span class="detail-value @statusClass">@Model.Status</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Listing:</span>
                <span class="detail-value">@Model.GpuListing.Title</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Job ID:</span>
                <span class="detail-value">
                    <span class="job-id">@Model.RentalJobId</span>
                </span>
            </div>
             <div class="detail-item">
                <span class="detail-label">Start Time (UTC):</span>
                <span class="detail-value">@(Model.ActualStartAt.HasValue ? Model.ActualStartAt.Value.ToString("g") : "N/A")</span>
            </div>
            <div class="detail-item">
                <span class="detail-label">Duration:</span>
                <span id="durationDisplay" class="detail-value font-weight-bold">--</span>
            </div>
        </div>

        <div class="card console">
            <h2>Dummy Console</h2>
            <div id="consoleOutput" class="console-output">
                @if(Model.Status == JobStatus.Running)
                {
                    <pre><span class="prompt">></span> Connecting to instance...</pre>
                    <pre><span class="prompt">></span> Connection successful.</pre>
                }
                else
                {
                    <pre><span class="prompt">></span> Session disconnected.</pre>
                }
            </div>
        </div>
    </section>
</div>


@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            const durationDisplay = document.getElementById('durationDisplay');

            // --- C# RAZOR BLOCK to conditionally render the correct JavaScript ---
            @if (Model.Status == JobStatus.Running && Model.ActualStartAt.HasValue)
            {
                // This JS block is ONLY rendered if the job is running.
                <text>
                    const startTime = new Date('@Model.ActualStartAt.Value.ToString("o")Z');

                    function updateTimer() {
                        const now = new Date();
                        const difference = now - startTime;
                        const hours = Math.floor(difference / 3600000);
                        const minutes = Math.floor((difference % 3600000) / 60000);
                        const seconds = Math.floor((difference % 60000) / 1000);
                        durationDisplay.textContent = `${hours} h, ${minutes} m, ${seconds} s`;
                    }
                    setInterval(updateTimer, 1000);
                    updateTimer(); // Run once immediately
                </text>
            }
            else if (Model.Status == JobStatus.Completed && Model.ActualStartAt.HasValue && Model.ActualEndAt.HasValue)
            {
                // This JS block is ONLY rendered if the job is completed and has both dates.
                <text>
                    const startTime = new Date('@Model.ActualStartAt.Value.ToString("o")Z');
                    const endTime = new Date('@Model.ActualEndAt.Value.ToString("o")Z');
                    const finalDifference = endTime - startTime;
                    
                    const finalHours = Math.floor(finalDifference / 3600000);
                    const finalMinutes = Math.floor((finalDifference % 3600000) / 60000);
                    
                    durationDisplay.textContent = `${finalHours} h, ${finalMinutes} m (Final)`;
                </text>
            }
            else
            {
                // This is the safe fallback for any other case (Failed, Cancelled, or invalid data).
                <text>
                    durationDisplay.textContent = "N/A";
                </text>
            }
            
        });
    </script>
}