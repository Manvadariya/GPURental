@model ProviderDashboardViewModel
@{
    ViewData["Title"] = "Provider Dashboard";
}

<div class="provider-dashboard-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="admin-header mb-0">@ViewData["Title"]</h1>
        <a asp-controller="Wallet" asp-action="Index" class="btn btn-primary btn-gradient btn-icon">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2"><path d="M21 12V7H5a2 2 0 0 1-2-2V3h14a2 2 0 0 1 2 2v7z"></path><path d="M1 12v7a2 2 0 0 0 2 2h18v-8a2 2 0 0 0-2-2H3z"></path><path d="M19 16h.01"></path></svg>
            <span>My Earnings</span>
        </a>
    </div>
    <!-- Stat Cards -->
    <div class="row">
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="provider-stat-card shadow-lg" style="background-color: #3b82f6;">
                <p class="stat-title">Active Listings</p>
                <p class="stat-number">@Model.ActiveListingsCount</p>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="provider-stat-card shadow-lg" style="background-color: #10b981;">
                <p class="stat-title">Total Earnings</p>
                <p class="stat-number">₹@Model.TotalEarnings.ToString("F2")</p>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="provider-stat-card shadow-lg" style="background-color: #14b8a6;">
                <p class="stat-title">Running Jobs</p>
                <p class="stat-number">@Model.RunningJobsCount</p>
            </div>
        </div>
        <div class="col-lg-3 col-md-6 mb-4">
            <div class="provider-stat-card shadow-lg" style="background-color: #f59e0b;">
                <p class="stat-title">Pending Disputes</p>
                <p class="stat-number">@Model.PendingDisputesCount</p>
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="row">
        <div class="col-lg-6 mb-4">
            <h2 class="section-header text-center">Earnings Distribution</h2>
            <div class="admin-table-card p-4">
                <div class="chart-container">
                    <canvas id="profitChart"></canvas>
                </div>
                <div id="profitChartLegend" class="chart-legend"></div>
            </div>
        </div>
        <div class="col-lg-6 mb-4">
            <h2 class="section-header text-center">Usage Distribution (Hours)</h2>
            <div class="admin-table-card p-4">
                <div class="chart-container">
                    <canvas id="usageChart"></canvas>
                </div>
                <div id="usageChartLegend" class="chart-legend"></div>
            </div>
        </div>
    </div>

    <!-- My Listings Section (RESTORED) -->
    <div class="mt-4">
        <div class="d-flex flex-column flex-sm-row justify-content-between align-items-sm-center mb-3">
            <h2 class="section-header mb-2 sm-mb-0">My Listings</h2>
            <a asp-controller="Listings" asp-action="Create" class="btn btn-success admin-action-btn">
                <i data-lucide="plus" class="mr-2"></i>
                Create New Listing
            </a>
        </div>
        <div class="admin-table-card">
            <div class="table-responsive">
                @if (Model.MyListings.Any())
                {
                    <table class="table admin-table mb-0">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>GPU Model</th>
                                <th>Price Per Hour</th>
                                <th>Status</th>
                                <th class="text-right">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.MyListings)
                            {
                                <tr>
                                    <td class="font-weight-bold">@item.Title</td>
                                    <td>@item.GpuModel</td>
                                    <td>₹@((item.PricePerHourInINR).ToString("F2"))</td>
                                    <td>
                                        @{
                                            var statusClass = "badge-secondary";
                                            if (item.Status == GpuStatus.Published) { statusClass = "badge-success"; }
                                            else if (item.Status == GpuStatus.InUse) { statusClass = "badge-info"; }
                                            else if (item.Status == GpuStatus.Paused) { statusClass = "badge-warning"; }
                                        }
                                        <span class="badge @statusClass">@item.Status</span>
                                    </td>
                                    <td class="text-right">
                                        <a asp-controller="Listings" asp-action="Edit" asp-route-id="@item.ListingId" class="btn btn-sm btn-outline-secondary admin-action-btn">Edit</a>

                                        @if (item.Status == GpuStatus.Draft || item.Status == GpuStatus.Paused)
                                        {
                                            <form asp-controller="Listings" asp-action="Publish" asp-route-id="@item.ListingId" method="post" class="d-inline">
                                                <button type="submit" class="btn btn-sm btn-success admin-action-btn">Publish</button>
                                            </form>
                                        }

                                        @if (item.Status == GpuStatus.Published)
                                        {
                                            <form asp-controller="Listings" asp-action="Pause" asp-route-id="@item.ListingId" method="post" class="d-inline">
                                                <button type="submit" class="btn btn-sm btn-warning admin-action-btn">Pause</button>
                                            </form>
                                        }
                                        <a asp-controller="Listings" asp-action="Delete" asp-route-id="@item.ListingId" class="btn btn-sm btn-danger admin-action-btn">Delete</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="text-center p-4">You have not created any listings yet.</div>
                }
            </div>
        </div>
    </div>

    <!-- Disputes Against Me Section (RESTORED) -->
    <div class="mt-5">
        <h2 class="section-header">Disputes Against My Listings</h2>
        <div class="admin-table-card">
            <div class="table-responsive">
                @if (Model.DisputesAgainstMe.Any())
                {
                    <table class="table admin-table mb-0">
                        <thead>
                            <tr>
                                <th>Date Raised</th>
                                <th>Raised By</th>
                                <th>Reason</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in Model.DisputesAgainstMe)
                            {
                                <tr>
                                    <td>@item.CreatedAt.ToShortDateString()</td>
                                    <td>@item.RaisedByUser.Email</td>
                                    <td>@item.Reason</td>
                                    <td>
                                        <span class="badge @(item.Status == DisputeStatus.Submitted ? "badge-warning" : "badge-secondary")">
                                            @item.Status
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="text-center p-4">No disputes have been filed against your listings.</div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            lucide.createIcons(); // Activate any new icons

            // Data from our C# ViewModel, serialized into JSON
            var profitData = @Html.Raw(Json.Serialize(Model.ProfitByListingData));
            var usageData = @Html.Raw(Json.Serialize(Model.UsageByListingData));

            // --- Chart Colors ---
            const chartColors = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ef4444', '#14b8a6'];

            // --- Create Profit Chart ---
            if (profitData.length > 0) {
                const profitCtx = document.getElementById('profitChart').getContext('2d');
                new Chart(profitCtx, {
                    type: 'doughnut',
                    data: {
                        labels: profitData.map(d => d.label),
                        datasets: [{
                            data: profitData.map(d => d.value),
                            backgroundColor: chartColors,
                            borderColor: '#ffffff',
                            borderWidth: 4,
                        }]
                    },
                    options: {
                        responsive: true,
                        cutout: '70%',
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return ` ₹${context.raw.toFixed(2)}`;
                                    }
                                }
                            }
                        }
                    }
                });
                // Build custom legend
                buildLegend(profitData, 'profitChartLegend', '₹', 2);
            } else {
                 document.getElementById('profitChart').parentElement.innerHTML = '<div class="text-center p-5 text-muted">No earnings data yet.</div>';
            }

            // --- Create Usage Chart ---
            if (usageData.length > 0) {
                const usageCtx = document.getElementById('usageChart').getContext('2d');
                new Chart(usageCtx, {
                    type: 'doughnut',
                    data: {
                        labels: usageData.map(d => d.label),
                        datasets: [{
                            data: usageData.map(d => d.value),
                            backgroundColor: chartColors.slice().reverse(), // Use different colors
                            borderColor: '#ffffff',
                            borderWidth: 4,
                        }]
                    },
                    options: {
                        responsive: true,
                        cutout: '70%',
                        plugins: {
                            legend: { display: false },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return ` ${context.raw.toFixed(1)} hours`;
                                    }
                                }
                            }
                        }
                    }
                });
                // Build custom legend
                buildLegend(usageData, 'usageChartLegend', '', 1, ' hours');
            } else {
                 document.getElementById('usageChart').parentElement.innerHTML = '<div class="text-center p-5 text-muted">No usage data yet.</div>';
            }

            // --- Helper function to build custom legends ---
            function buildLegend(data, elementId, prefix = '', decimals = 0, suffix = '') {
                const legendContainer = document.getElementById(elementId);
                const total = data.reduce((sum, item) => sum + item.value, 0);

                data.forEach((item, index) => {
                    const percentage = total > 0 ? (item.value / total * 100).toFixed(0) : 0;
                    const color = chartColors[index % chartColors.length];
                    const legendItem = `
                        <div class="d-flex align-items-center justify-content-between p-2 rounded" style="background-color: ${color.replace(')', ', 0.1)')};">
                            <div class="d-flex align-items-center">
                                <div style="width: 12px; height: 12px; background-color: ${color}; border-radius: 50%;"></div>
                                <span class="ml-2 small font-weight-medium">${item.label}</span>
                            </div>
                            <div class="text-right">
                                <div class="small font-weight-bold" style="color: ${color}">${prefix}${item.value.toFixed(decimals)}${suffix}</div>
                                <div class="small text-muted">${percentage}%</div>
                            </div>
                        </div>`;
                    legendContainer.innerHTML += legendItem;
                });
            }
        });
    </script>
}
